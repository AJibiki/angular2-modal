{"version":3,"file":"dom-modal-renderer.js","sourceRoot":"","sources":["dom-modal-renderer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAQO,eAAe,CAAC,CAAA;AAOvB;IACI,0BAAoB,GAAsB,EACtB,SAAmB;QADnB,QAAG,GAAH,GAAG,CAAmB;QACtB,cAAS,GAAT,SAAS,CAAU;IAAG,CAAC;IAE3C,iCAAM,GAAN,UAAO,IAAU,EACV,aAA+B,EAC/B,QAAsC,EACtC,MAAsB;QAH7B,iBA0BC;QAtBG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC;aACjC,IAAI,CAAC,UAAA,UAAU;YACZ,IAAM,WAAW,GAAG,aAAa,CAAC,cAAc,CAAC;YACjD,IAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC;gBAChE,yBAAkB,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;YAClF,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAC1F,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,MAAW;YACd,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;gBACnB,KAAI,CAAC,SAAS,CAAC,mBAAmB,CAC9B,aAAa,CAAC,OAAO,CAAC,aAAa,EACnC,aAAa,EACb,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CACjC,CAAC;YACN,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,CAAC;YAED,MAAM,CAAC,OAAO,GAAG,cAAM,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,CAAC;YAExC,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IA/BL;QAAC,iBAAU,EAAE;;wBAAA;IAgCb,uBAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,wBAAgB,mBA+B5B,CAAA","sourcesContent":["import {\n    ViewContainerRef,\n    ComponentResolver,\n    Renderer,\n    ResolvedReflectiveProvider,\n    ReflectiveInjector,\n    Injectable,\n    Type\n} from '@angular/core';\n\n\nimport {DialogRef} from '../models/dialog-ref';\nimport {ModalRenderer} from '../models/tokens';\n\n@Injectable()\nexport class DOMModalRenderer implements ModalRenderer {\n    constructor(private _cr: ComponentResolver,\n                private _renderer: Renderer) {}\n\n    render(type: Type,\n           viewContainer: ViewContainerRef,\n           bindings: ResolvedReflectiveProvider[],\n           dialog: DialogRef<any>): Promise<DialogRef<any>> {\n        return this._cr.resolveComponent(type)\n            .then(cmpFactory => {\n                const ctxInjector = viewContainer.parentInjector;\n                const childInjector = Array.isArray(bindings) && bindings.length > 0 ?\n                    ReflectiveInjector.fromResolvedProviders(bindings, ctxInjector) : ctxInjector;\n                return viewContainer.createComponent(cmpFactory, viewContainer.length, childInjector);\n            })\n            .then((cmpRef: any) => {\n                if (dialog.inElement) {\n                    this._renderer.invokeElementMethod(\n                        viewContainer.element.nativeElement,\n                        'appendChild',\n                        [cmpRef.hostView.rootNodes[0]]\n                    );\n                } else {\n                    document.body.appendChild(cmpRef.hostView.rootNodes[0]);\n                }\n\n                dialog.destroy = () => cmpRef.destroy();\n\n                return dialog;\n            });\n    }\n}\n\n"]}