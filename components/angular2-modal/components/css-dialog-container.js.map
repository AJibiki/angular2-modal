{"version":3,"file":"css-dialog-container.js","sourceRoot":"","sources":["css-dialog-container.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAQO,eAAe,CAAC,CAAA;AACvB,iCAAuC,2BAA2B,CAAC,CAAA;AAEnE,uCAAqC,0BAA0B,CAAC,CAAA;AAChE,+BAA0B,sBAAsB,CAAC,CAAA;AAGjD;;GAEG;AAYH;IAAwC,sCAAoB;IAM1D,4BAAmB,MAAsB,EAC7B,EAAc,EAAE,SAAiC;QAC3D,kBAAM,SAAS,EAAE,EAAE,CAAC,CAAC;QAFJ,WAAM,GAAN,MAAM,CAAgB;QALzC,aAAQ,GAAW,CAAC,CAAC,CAAC;QACtB,SAAI,GAAW,QAAQ,CAAC;QAOtB,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACnC,CAAC;IAED,yCAAY,GAAZ,UAAgB,IAAc,EAAE,QAAuC;QACrE,MAAM,CAAC,gBAAK,CAAC,aAAa,YAAI,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAVD;QAAC,gBAAS,CAAC,aAAa,EAAE,EAAC,IAAI,EAAE,uBAAgB,EAAC,CAAC;;qDAAA;IAfrD;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;YAChC,IAAI,EAAE;gBACJ,iBAAiB,EAAE,UAAU;gBAC7B,aAAa,EAAE,MAAM;gBACrB,cAAc,EAAE,UAAU;gBAC1B,cAAc,EAAE,UAAU;aAC3B;YACD,aAAa,EAAE,wBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,4BAA4B;SACvC,CAAC;;0BAAA;IAiBF,yBAAC;AAAD,CAAC,AAhBD,CAAwC,6CAAoB,GAgB3D;AAhBY,0BAAkB,qBAgB9B,CAAA","sourcesContent":["import {\n  Component,\n  ComponentRef,\n  ViewContainerRef,\n  ResolvedReflectiveProvider,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef\n} from '@angular/core';\nimport { DomSanitizationService } from '@angular/platform-browser';\n\nimport { BaseDynamicComponent } from './base-dynamic-component';\nimport { DialogRef } from '../../angular2-modal';\nimport { Class } from '../framework/utils';\n\n/**\n * A component that acts as a top level container for an open modal window.\n */\n@Component({\n  selector: 'css-dialog-container',\n  host: {\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.role]': 'role',\n    '[attr.class]': 'cssClass',\n    '[attr.style]': 'styleStr'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template: `<span #modalDialog></span>`\n})\nexport class CSSDialogContainer extends BaseDynamicComponent {\n  tabIndex: number = -1;\n  role: string = 'dialog';\n  \n  @ViewChild('modalDialog', {read: ViewContainerRef}) private vcRef: ViewContainerRef;\n\n  constructor(public dialog: DialogRef<any>,\n              el: ElementRef, sanitizer: DomSanitizationService) {\n    super(sanitizer, el);\n    this.activateAnimationListener();\n  }\n\n  addComponent<T>(type: Class<T>, bindings?: ResolvedReflectiveProvider[]): ComponentRef<T> {\n    return super._addComponent<T>(type, this.vcRef, bindings);\n  }\n\n}\n"]}