{"version":3,"file":"modal-context.js","sourceRoot":"","sources":["modal-context.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAG3C,sBAAmC,sBAAsB,CAAC,CAAA;AAC1D,gCAAsD,mBAAmB,CAAC,CAAA;AAE7D,sBAAc,GAAG,EAAE,CAAC;AAEjC,IAAM,eAAe,GAAG;IACpB,SAAS;CACZ,CAAC;AAEF;IAAkC,gCAAc;IAAhD;QAAkC,8BAAc;IAOhD,CAAC;IAAD,mBAAC;AAAD,CAAC,AAPD,CAAkC,gCAAc,GAO/C;AAPY,oBAAY,eAOxB,CAAA;AAED;;;GAGG;AAEH;IAAiE,uCAAwB;IAQrF,6BACI,aAAkC,EAClC,cAAoC,EACpC,QAAiC;QAFjC,6BAAkC,GAAlC,yBAAkC;QAClC,8BAAoC,GAApC,0BAAoC;QACpC,wBAAiC,GAAjC,oBAAiC;QAEjC,kBACI,cAAM,CAAM,sBAAc,EAAE,aAAa,IAAI,EAAE,CAAC,EAChD,kBAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACX,CAAC;IACN,CAAC;IAnBL;QAAC,iBAAU,EAAE;;2BAAA;IAoBb,0BAAC;AAAD,CAAC,AAnBD,CAAiE,uCAAqB,GAmBrF;AAnBY,2BAAmB,sBAmB/B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { OverlayContext, OverlayContextBuilder } from './overlay-context';\n\nexport const DEFAULT_VALUES = {};\n\nconst DEFAULT_SETTERS = [\n    'message'\n];\n\nexport class ModalContext extends OverlayContext {\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: string;\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\n@Injectable()\nexport class ModalContextBuilder<T extends ModalContext> extends OverlayContextBuilder<T> {\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: FluentAssignMethod<string, this>;\n\n    constructor(\n        defaultValues: T | T[] = undefined,\n        initialSetters: string[] = undefined,\n        baseType: new () => T = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType\n        );\n    }\n}\n"]}