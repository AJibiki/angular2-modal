{"version":3,"file":"dialog-ref.js","sourceRoot":"","sources":["dialog-ref.ts"],"names":[],"mappings":";AACA,wBAA6B,kCAAkC,CAAC,CAAA;AAEhE;;GAEG;AACH;IASI,mBAAmB,OAAW;QAAX,YAAO,GAAP,OAAO,CAAI;QAC1B,IAAI,CAAC,eAAe,GAAG,wBAAc,CAAC,SAAS,EAAE,CAAC;IACtD,CAAC;IAMD,sBAAI,6BAAM;QAJV;;;WAGG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;QACxC,CAAC;;;OAAA;IAED;;OAEG;IACH,yBAAK,GAAL,UAAM,MAAkB;QAAlB,sBAAkB,GAAlB,aAAkB;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAU,aAAa,CAAC,KAAK,IAAI,CAAC;YAAC,MAAM,CAAC;QAC5D,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAED;;;;;;OAMG;IACH,2BAAO,GAAP;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAU,eAAe,CAAC,KAAK,IAAI,CAAC;YAAC,MAAM,CAAC;QAC9D,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;IAClC,CAAC;IAED,2BAAO,GAAP,cAAW,CAAC;IAEJ,6BAAS,GAAjB,UAAqB,IAAqC;QACtD,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,EACtD,EAAE,GAAG,QAAQ,IAAI,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,UAAU,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE5E,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACL,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;IACL,CAAC;IACL,gBAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,iBAAS,YAuDrB,CAAA","sourcesContent":["import {ComponentRef} from '@angular/core';\nimport {PromiseWrapper} from '@angular/core/src/facade/promise';\n\n/**\n * API to an open modal window.\n */\nexport class DialogRef<T> {\n    contentRef: ComponentRef<any>;\n    /**\n     * States if the modal is inside a specific element.\n     */\n    public inElement: boolean;\n\n    private _resultDeferred: any;\n    \n    constructor(public context?: T) {\n        this._resultDeferred = PromiseWrapper.completer();\n    }\n\n    /**\n     * A Promise that is resolved on a close event and rejected on a dismiss event.\n     * @returns {Promise<T>|any|*|Promise<any>}\n     */\n    get result(): Promise<any> {\n        return this._resultDeferred.promise;\n    }\n\n    /**\n     *  Close the modal with a return value, i.e: result.\n     */\n    close(result: any = null) {\n        if (this._fireHook<boolean>('beforeClose') === true) return;\n        this.destroy();\n        this._resultDeferred.resolve(result);\n    }\n\n    /**\n     *  Close the modal without a return value, i.e: cancelled.\n     *  This call is automatically invoked when a user either:\n     *  - Presses an exit keyboard key (if configured).\n     *  - Clicks outside of the modal window (if configured).\n     *  Usually, dismiss represent a Cancel button or a X button.\n     */\n    dismiss() {\n        if (this._fireHook<boolean>('beforeDismiss') === true) return;\n        this.destroy();\n        this._resultDeferred.reject();\n    }\n\n    destroy() {}\n\n    private _fireHook<T>(name: 'beforeClose' | 'beforeDismiss'): T {\n        let instance = this.contentRef && this.contentRef.instance,\n            fn = instance && typeof instance[name] === 'function' && instance[name];\n\n        if (fn) {\n            return fn.call(instance);\n        } else {\n            return undefined;\n        }\n    }\n}\n"]}