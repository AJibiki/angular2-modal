{"version":3,"file":"tokens.js","sourceRoot":"","sources":["tokens.ts"],"names":[],"mappings":";AAWA,WAAY,YAAY;IACtB,iDAAK,CAAA;IACL,mDAAM,CAAA;IACN,qDAAO,CAAA;AACT,CAAC,EAJW,oBAAY,KAAZ,oBAAY,QAIvB;AAJD,IAAY,YAAY,GAAZ,oBAIX,CAAA;AA2DD;IAAA;IAGA,CAAC;IAAD,sBAAC;AAAD,CAAC,AAHD,IAGC;AAHqB,uBAAe,kBAGpC,CAAA","sourcesContent":["import {\n  ComponentRef,\n  ViewContainerRef,\n  ResolvedReflectiveProvider\n} from '@angular/core';\n\nimport { ModalOverlay } from '../overlay';\nimport { DialogRef } from './dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\nimport { Maybe } from '../framework/utils';\n\nexport enum DROP_IN_TYPE {\n  alert,\n  prompt,\n  confirm\n}\n\nexport type WideVCRef = ViewContainerRef | string;\n\nexport interface OverlayPlugin extends Function {\n  <T>(component: any, dialogRef: DialogRef<T>, config: OverlayConfig): Maybe<DialogRef<any>>;\n}\n\nexport interface OverlayConfig {\n  /**\n   * The context for the modal, attached to the dialog instance, DialogRef.context.\n   * Default: {}\n   */\n  context?: OverlayContext;\n\n  /**\n   * Resolved providers that will inject into the component provided.\n   */\n  bindings?: ResolvedReflectiveProvider[];\n\n  /**\n   *  The element to block using the modal.\n   *  Default: The value set in defaultViewContainer.\n   */\n  viewContainer?: WideVCRef;\n\n  /**\n   * If true, render's the component inside the ViewContainerRef,\n   * otherwise render's the component in the root element (body in DOM)\n   * Default: true if ViewContainer supplied, false if not supplied.\n   */\n  inside?: boolean;\n\n  renderer?: OverlayRenderer;\n\n  /**\n   * Not used yet.\n   */\n  overlayPlugins?: OverlayPlugin | Array<OverlayPlugin>;\n}\n\nexport interface ModalComponent<T> {\n  dialog: DialogRef<T>;\n}\n\nexport interface CloseGuard {\n  /**\n   * Invoked before a modal is dismissed.\n   * @return true or a promise that resolves to true to cancel dismissal.\n   */\n  beforeDismiss?(): boolean | Promise<boolean>;\n\n  /**\n   * Invoked before a modal is closed.\n   * @return true or a promise that resolves to true to cancel closing.\n   */\n  beforeClose?(): boolean | Promise<boolean>;\n}\n\nexport abstract class OverlayRenderer {\n  public abstract render(dialogRef: DialogRef<any>,\n                         vcRef: ViewContainerRef): ComponentRef<ModalOverlay>;\n}\n"]}