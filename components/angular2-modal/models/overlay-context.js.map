{"version":3,"file":"overlay-context.js","sourceRoot":"","sources":["overlay-context.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAE3C,8BAAiD,8BAA8B,CAAC,CAAA;AAChF,sBAAmC,sBAAsB,CAAC,CAAA;AAI7C,sBAAc,GAAG;IAC1B,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE,CAAC,EAAE,CAAC;IACd,WAAW,EAAE,qBAAqB,OAAe;QAC7C,MAAM,CAAiB,IAAI,CAAC,QAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IAChE,CAAC;CACJ,CAAC;AAEF,IAAM,eAAe,GAAG;IACpB,YAAY;IACZ,UAAU;CACb,CAAC;AAEF;IAAA;IA4BA,CAAC;IAZG,kCAAS,GAAT;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACvB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,QAAQ,GAAG,CAAS,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAgB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,QAAQ,GAAG,sBAAc,CAAC,QAAQ,CAAC;QAC5C,CAAC;IACL,CAAC;IACL,qBAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,sBAAc,iBA4B1B,CAAA;AAED;;;GAGG;AAEH;IAAqE,yCAAe;IAiBhF,+BACI,aAAkC,EAClC,cAAoC,EACpC,QAAiC;QAFjC,6BAAkC,GAAlC,yBAAkC;QAClC,8BAAoC,GAApC,0BAAoC;QACpC,wBAAiC,GAAjC,oBAAiC;QAEjC,kBACI,cAAM,CAAM,sBAAc,EAAE,aAAa,IAAI,EAAE,CAAC,EAChD,kBAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACX,CAAC;IACN,CAAC;IA5BL;QAAC,iBAAU,EAAE;;6BAAA;IA6Bb,4BAAC;AAAD,CAAC,AA5BD,CAAqE,4BAAY,GA4BhF;AA5BY,6BAAqB,wBA4BjC,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { FluentAssign, FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { DialogRef } from './dialog-ref';\nimport { WideVCRef } from './tokens';\n\nexport const DEFAULT_VALUES = {\n    isBlocking: true,\n    keyboard: [27],\n    supportsKey: function supportsKey(keyCode: number): boolean {\n        return (<Array<number>>this.keyboard).indexOf(keyCode) > -1;\n    }\n};\n\nconst DEFAULT_SETTERS = [\n    'isBlocking',\n    'keyboard'\n];\n\nexport class OverlayContext {\n    /**\n     * Describes if the modal is blocking modal.\n     * A Blocking modal is not closable by clicking outside of the modal window.\n     * Defaults to false.\n     */\n    isBlocking: boolean;\n\n    /**\n     * Keyboard value/s that close the modal.\n     * Accepts either a single numeric value or an array of numeric values.\n     * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n     * Defaults to 27, set `null` implicitly to disable.\n     */\n    keyboard: Array<number> | number;\n\n    normalize(): void {\n        if (this.isBlocking !== false)\n            this.isBlocking = true;\n\n        if (this.keyboard === null) {\n            this.keyboard = [];\n        } else if (typeof this.keyboard === 'number') {\n            this.keyboard = [<number>this.keyboard];\n        } else if (!Array.isArray(<Array<number>>this.keyboard)) {\n            this.keyboard = DEFAULT_VALUES.keyboard;\n        }\n    }\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\n@Injectable()\nexport class OverlayContextBuilder<T extends OverlayContext> extends FluentAssign<T> {\n    /**\n     * Describes if the modal is blocking modal.\n     * A Blocking modal is not closable by clicking outside of the modal window.\n     * Defaults to false.\n     */\n    isBlocking: FluentAssignMethod<boolean, this>;\n\n    /**\n     * Keyboard value/s that close the modal.\n     * Accepts either a single numeric value or an array of numeric values.\n     * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n     * Defaults to 27, set `null` implicitly to disable.\n     */\n    keyboard: FluentAssignMethod<Array<number> | number, this>;\n\n\n    constructor(\n        defaultValues: T | T[] = undefined,\n        initialSetters: string[] = undefined,\n        baseType: new () => T = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType\n        );\n    }\n}\n\nexport interface ModalControllingContextBuilder<T> {\n    open(viewContainer?: WideVCRef): Promise<DialogRef<T>>;\n}\n"]}