{"version":3,"file":"dropin-preset.js","sourceRoot":"","sources":["dropin-preset.ts"],"names":[],"mappings":";;;;;;AACA,uBAA6B,wBAAwB,CAAC,CAAA;AAGtD,kCAAqE,sBAAsB,CAAC,CAAA;AAC5F,8BAAkD,iBAAiB,CAAC,CAAA;AAEpE,sBAAuB,0BAA0B,CAAC,CAAA;AAElD,IAAM,eAAe,GAAG;IACpB,aAAa;IACb,iBAAiB;CACpB,CAAC;AAEF;;GAEG;AACH;IAAkC,gCAAY;IAA9C;QAAkC,8BAAY;IAkB9C,CAAC;IAHG,sBAAI,mCAAS;aAAb;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,KAAK,qBAAY,CAAC,MAAM,CAAC;QACnD,CAAC;;;OAAA;IACL,mBAAC;AAAD,CAAC,AAlBD,CAAkC,4BAAY,GAkB7C;AAlBY,oBAAY,eAkBxB,CAAA;AAED;;GAEG;AACH;IAAyC,uCAAiC;IAatE,6BAAY,KAAY,EAAE,UAAwB,EAAE,aAAuC;QAAvC,6BAAuC,GAAvC,yBAAuC;QACvF,kBACI,KAAK,EACL,cAAM,CAAM,EAAC,OAAA,KAAK,EAAE,WAAA,mCAAS,EAAE,SAAA,8BAAO,EAAE,YAAA,UAAU,EAAC,EAAE,aAAa,IAAI,EAAE,CAAC,EACzE,eAAe,EACf,YAAY,CACf,CAAC;IACN,CAAC;IAED,0CAAY,GAAZ,UAAa,MAAoB;QAC7B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAExB,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACxB,KAAK,qBAAY,CAAC,MAAM;gBACpB,MAAM,CAAC,aAAa,GAAG,SAAS,CAAC;YACrC,KAAK,qBAAY,CAAC,OAAO;gBACrB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBAC7B,KAAK,CAAC;QACd,CAAC;QACD,MAAM,CAAC,gBAAK,CAAC,YAAY,YAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IACL,0BAAC;AAAD,CAAC,AAlCD,CAAyC,mCAAmB,GAkC3D;AAlCY,2BAAmB,sBAkC/B,CAAA","sourcesContent":["import { ResolvedReflectiveProvider } from '@angular/core';\nimport { DROP_IN_TYPE } from '../../../models/tokens';\nimport { FluentAssignMethod } from '../../../framework/fluent-assign';\nimport { Modal } from '../modal';\nimport { DialogFormModal as component,  FormDropIn as content } from '../dialog-form-modal';\nimport { DialogPreset, DialogPresetBuilder } from './dialog-preset';\n\nimport { extend } from '../../../framework/utils';\n\nconst DEFAULT_SETTERS = [\n    'placeholder',\n    'showCloseButton'\n];\n\n/**\n * Data definition\n */\nexport class DropInPreset extends DialogPreset {\n\n    /**\n     * the message to display on the modal.\n     */\n    message: string;\n\n    /**\n     * A placeholder for the input element.\n     * Valid only for prompt modal.\n     */\n    placeholder: string;\n\n    dropInType: DROP_IN_TYPE;\n\n    get showInput(): boolean {\n        return this.dropInType === DROP_IN_TYPE.prompt;\n    }\n} \n\n/**\n * A Preset representing all 3 drop ins (alert, prompt, confirm)\n */\nexport class DropInPresetBuilder extends DialogPresetBuilder<DropInPreset> {\n\n    /**\n     * the message to display on the modal.\n     */\n    message: FluentAssignMethod<string, this>;\n\n    /**\n     * A placeholder for the input element.\n     * Valid only for prompt modal.\n     */\n    placeholder: FluentAssignMethod<string, this>;\n    \n    constructor(modal: Modal, dropInType: DROP_IN_TYPE, defaultValues: DropInPreset = undefined) {\n        super(\n            modal,\n            extend<any>({modal, component, content, dropInType}, defaultValues || {}),\n            DEFAULT_SETTERS,\n            DropInPreset\n        );\n    }\n\n    $$beforeOpen(config: DropInPreset): ResolvedReflectiveProvider[] {\n        this.addOkButton('Yep');\n\n        switch (config.dropInType) {\n            case DROP_IN_TYPE.prompt:\n                config.defaultResult = undefined;\n            case DROP_IN_TYPE.confirm:\n                this.addCancelButton('Nope');\n                break;\n        }\n        return super.$$beforeOpen(config);\n    }\n}\n"]}