webpackJsonp([2],{0:function(t,e,o){"use strict";function n(){return s?Promise.reject(null):(s=!0,i.platformBrowserDynamic().bootstrapModule(a.AppModule)["catch"](function(t){return console.error(t)}))}function r(){return s}var i=o(363),a=o(565),s=!1;e.main=n,e.isBootstrapped=r,document.addEventListener("DOMContentLoaded",n)},7:function(t,e,o){"use strict";function n(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}n(o(381));var r=o(380);e.createComponent=r.createComponent;var i=o(118);e.extend=i.extend,e.arrayUnion=i.arrayUnion,e.supportsKey=i.supportsKey;var a=o(382);e.DialogRef=a.DialogRef;var s=o(240);e.DROP_IN_TYPE=s.DROP_IN_TYPE,e.ModalDropInFactory=s.ModalDropInFactory,e.ModalBackdropComponent=s.ModalBackdropComponent,e.ModalComponent=s.ModalComponent,e.ModalCompileConfig=s.ModalCompileConfig,e.ModalRenderer=s.ModalRenderer;var c=o(246);e.Modal=c.Modal,e.DOMModalRenderer=c.DOMModalRenderer;var l=o(383);e.DEFAULT_VALUES=l.DEFAULT_VALUES,e.ModalContext=l.ModalContext,e.ModalContextBuilder=l.ModalContextBuilder,e.ModalControllingContextBuilder=l.ModalControllingContextBuilder;var d=o(559);e.ModalOpenContext=d.ModalOpenContext,e.ModalOpenContextBuilder=d.ModalOpenContextBuilder;var u=o(557);e.ModalModule=u.ModalModule},118:function(t,e){"use strict";function o(t,e){var o={};for(var n in t)t.hasOwnProperty(n)&&(o[n]=t[n]);for(var n in e)e.hasOwnProperty(n)&&(o[n]=e[n]);return o}function n(t,e){return t.concat(e.filter(function(e){return t.indexOf(e)===-1}))}function r(t,e){return Array.isArray(e)?e.indexOf(t)>-1:null!==e}function i(t){return Object.getOwnPropertyNames(t).map(function(e){return e+":"+t[e]}).join(";")}function a(){}e.extend=o,e.arrayUnion=n,e.supportsKey=r,e.toStyleString=i;var s=function(){function t(){var t=this;this.promise=new Promise(function(e,o){t.resolve=e,t.reject=o})}return t}();e.PromiseCompleter=s,e.noop=a},163:function(t,e,o){"use strict";var n=o(386);e.BootstrapModalSize=n.BootstrapModalSize,e.BSModalContext=n.BSModalContext,e.BSModalContextBuilder=n.BSModalContextBuilder;var r=o(384);e.BSModalBackdrop=r.BSModalBackdrop;var i=o(385);e.BSModalContainer=i.BSModalContainer;var a=o(241);e.BSMessageModal=a.BSMessageModal;var s=o(387);e.BSModalFooter=s.BSModalFooter;var c=o(243);e.MessageModalPreset=c.MessageModalPreset,e.MessageModalPresetBuilder=c.MessageModalPresetBuilder;var l=o(7);e.ModalOpenContext=l.ModalOpenContext,e.ModalOpenContextBuilder=l.ModalOpenContextBuilder;var d=o(388);e.OneButtonPreset=d.OneButtonPreset,e.OneButtonPresetBuilder=d.OneButtonPresetBuilder;var u=o(389);e.TwoButtonPreset=u.TwoButtonPreset,e.TwoButtonPresetBuilder=u.TwoButtonPresetBuilder;var f=o(242);e.BSModal=f.BSModal,e.Modal=f.Modal;var p=o(560);e.BootstrapModalModule=p.BootstrapModalModule},164:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(7),s=function(){function t(){this.onButtonClick=new i.EventEmitter}return t.prototype.onClick=function(t,e){e.stopPropagation(),this.onButtonClick.emit({btn:t,$event:e})},n([i.Input(),r("design:type",Array)],t.prototype,"buttons",void 0),n([i.Output(),r("design:type",Object)],t.prototype,"onButtonClick",void 0),t=n([i.Component({selector:"vex-dialog-buttons",encapsulation:i.ViewEncapsulation.None,template:'<div class="vex-dialog-buttons">\n    <button type="button" \n         *ngFor="let btn of buttons;"\n         [class]="btn.cssClass"\n         (click)="onClick(btn, $event)">{{btn.caption}}</button>\n</div>'}),r("design:paramtypes",[])],t)}();e.VEXDialogButtons=s;var c=function(){function t(t,e,o){this.dialog=t,this._compileConfig=e,this._cr=o,this.context=t.context}return t.prototype.ngAfterViewInit=function(){var t=this;setTimeout(function(){t.dialog.contentRef=a.createComponent(t._cr,t.context.content,t._viewContainer,t._compileConfig.bindings)})},t.prototype.onButtonClick=function(t){t.btn.onClick(this,t.$event)},n([i.ViewChild("modalDialog",{read:i.ViewContainerRef}),r("design:type","function"==typeof(e="undefined"!=typeof i.ViewContainerRef&&i.ViewContainerRef)&&e||Object)],t.prototype,"_viewContainer",void 0),t=n([i.Component({selector:"modal-dialog",encapsulation:i.ViewEncapsulation.None,template:'<form class="vex-dialog-form">\n    <div style="display: none" #modalDialog></div> \n    <vex-dialog-buttons [buttons]="context.buttons"\n                        (onButtonClick)="onButtonClick($event)"></vex-dialog-buttons>\n</form>'}),r("design:paramtypes",["function"==typeof(o="undefined"!=typeof a.DialogRef&&a.DialogRef)&&o||Object,"function"==typeof(s="undefined"!=typeof a.ModalCompileConfig&&a.ModalCompileConfig)&&s||Object,"function"==typeof(c="undefined"!=typeof i.ComponentFactoryResolver&&i.ComponentFactoryResolver)&&c||Object])],t);var e,o,s,c}();e.DialogFormModal=c;var l=function(){function t(t){this.dialog=t,this.context=t.context}return t=n([i.Component({selector:"drop-in-dialog",encapsulation:i.ViewEncapsulation.None,template:'<div class="vex-dialog-message">{{context.message}}</div>\n    <div *ngIf="context.showInput" class="vex-dialog-input">\n        <input autofocus #input\n               name="vex" \n               type="text" \n               class="vex-dialog-prompt-input"\n               (change)="context.defaultResult = input.value"               \n               placeholder="{{context.placeholder}}">\n    </div>'}),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof a.DialogRef&&a.DialogRef)&&e||Object])],t);var e}();e.FormDropIn=l},165:function(t,e,o){"use strict";var n=o(7);e.Modal=n.Modal},166:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(20),s=o(247),c=function(){function t(){}return t.forRoot=function(){return{ngModule:t,providers:[]}},t=n([i.NgModule({imports:[a.CommonModule],declarations:[s.DemoHead],exports:[s.DemoHead]}),r("design:paramtypes",[])],t)}();e.SharedModule=c},240:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(1);!function(t){t[t.alert=0]="alert",t[t.prompt=1]="prompt",t[t.confirm=2]="confirm"}(e.DROP_IN_TYPE||(e.DROP_IN_TYPE={}));var i=(e.DROP_IN_TYPE,function(){function t(t,e){this.component=t,this.bindings=e}return t}());e.ModalCompileConfig=i;var a=function(){function t(){}return t}();e.ModalRenderer=a;var s=function(t){function e(){t.apply(this,arguments)}return n(e,t),e}(r.Type);e.ModalBackdropComponent=s;var c=function(){function t(){}return t}();e.ModalDropInFactory=c},241:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(7),s=function(){function t(t){this.dialog=t,this.context=t.context}return t.prototype.onFooterButtonClick=function(t){t.btn.onClick(this,t.$event)},Object.defineProperty(t.prototype,"titleHtml",{get:function(){return this.context.titleHtml?1:0},enumerable:!0,configurable:!0}),t=n([i.Component({selector:"modal-content",encapsulation:i.ViewEncapsulation.None,template:'<div [ngClass]="context.headerClass" [ngSwitch]="titleHtml">\n        <button *ngIf="context.showClose" type="button" class="close" \n                aria-label="Close" (click)="dialog.dismiss()">\n            <span aria-hidden="true">Ã—</span>\n        </button>\n        <div *ngSwitchCase="1" [innerHtml]="context.titleHtml"></div>\n        <h3 *ngSwitchDefault class="modal-title">{{context.title}}</h3>\n    </div>\n    <div [ngClass]="context.bodyClass" [innerHtml]="context.message"></div>\n    <modal-footer [footerClass]="context.footerClass" \n                  [buttons]="context.buttons"\n                  (onButtonClick)="onFooterButtonClick($event)"></modal-footer>'}),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof a.DialogRef&&a.DialogRef)&&e||Object])],t);var e}();e.BSMessageModal=s},242:function(t,e,o){"use strict";var n=o(7);e.Modal=n.Modal},243:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i=o(386),a=o(241),s={component:a.BSMessageModal,headerClass:"modal-header",bodyClass:"modal-body",footerClass:"modal-footer"},c=["headerClass","title","titleHtml","bodyClass","footerClass"],l=function(t){function e(e,o,n){void 0===e&&(e=void 0),void 0===o&&(o=void 0),void 0===n&&(n=void 0),t.call(this,r.extend(r.extend({buttons:[]},s),e||{}),r.arrayUnion(c,o||[]),n),r.setAssignAlias(this,"body","message",!0)}return n(e,t),e.prototype.addButton=function(t,e,o){var n={cssClass:t,caption:e,onClick:o},i=r.privateKey("buttons");return this[i].push(n),this},e}(i.BSModalContextBuilder);e.MessageModalPresetBuilder=l},244:function(t,e,o){"use strict";var n=o(245);e.Modal=n.Modal,e.JSNativeModal=n.JSNativeModal;var r=o(391);e.JSNativeModalContext=r.JSNativeModalContext,e.JSNativeModalContextBuilder=r.JSNativeModalContextBuilder;var i=o(390);e.JSNativeModalRenderer=i.JSNativeModalRenderer;var a=o(392);e.JSNativePresetBuilder=a.JSNativePresetBuilder;var s=o(561);e.JSNativeModalModule=s.JSNativeModalModule},245:function(t,e,o){"use strict";var n=o(7);e.Modal=n.Modal},246:function(t,e,o){"use strict";var n=o(399);e.DOMModalRenderer=n.DOMModalRenderer;var r=o(563);e.Modal=r.Modal;var i=o(564);e.DOMOutsideEventPlugin=i.DOMOutsideEventPlugin},247:function(t,e,o){"use strict";function n(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}n(o(571))},248:function(t,e,o){"use strict";var n=o(7);e.Modal=n.Modal},380:function(t,e,o){"use strict";function n(t,e,o,n){return o.createComponent(t.resolveComponentFactory(e),o.length,r(o,n))}function r(t,e){var o=t.parentInjector;return Array.isArray(e)&&e.length>0?i.ReflectiveInjector.fromResolvedProviders(e,o):o}var i=o(1);e.createComponent=n,Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},381:function(t,e){"use strict";function o(t){if(!t)throw new Error("Illegal method name. Empty method name is not allowed");if(t in this)throw new Error("A member name '"+t+"' already defined.")}function n(t){return Object.getOwnPropertyNames(t).filter(function(t){return d.test(t)}).map(function(t){return t.substr(2)})}function r(t){return l+t}function i(t,e,o){Object.defineProperty(t,e,{configurable:!1,enumerable:!1,writable:!1,value:o})}function a(t,e){Object.getOwnPropertyNames(e).forEach(function(o){return t[r(o)]=e[o]})}function s(t,e,n){var a=this;void 0===n&&(n=!1),o.call(t,e);var s=r(e);i(t,e,function(o){if(n&&a.hasOwnProperty(s))throw new Error("Overriding config property '"+e+"' is not allowed.");return t[s]=o,t})}function c(t,e,n,a){if(void 0===a&&(a=!1),o.call(t,e),i(t,e,function(e){return t[n](e),t}),a===!0){var s=r(e),c=r(n);Object.defineProperty(t,s,{configurable:!1,enumerable:!1,get:function(){return t[c]}})}}var l="$$",d=/^(\$\$).*/;e.privateKey=r,e.setAssignMethod=s,e.setAssignAlias=c;var u=function(){function t(t){this._fluentAssign=t instanceof f?t:new f}return t.prototype.setMethod=function(t,e){return void 0===e&&(e=void 0),s(this._fluentAssign,t),void 0!==e&&this._fluentAssign[t](e),this},Object.defineProperty(t.prototype,"fluentAssign",{get:function(){return this._fluentAssign},enumerable:!0,configurable:!0}),t}();e.FluentAssignFactory=u;var f=function(){function t(t,e,o){var n=this;void 0===t&&(t=void 0),void 0===e&&(e=void 0),void 0===o&&(o=void 0),Array.isArray(t)?t.forEach(function(t){return a(n,t)}):t&&a(this,t),Array.isArray(e)&&e.forEach(function(t){return s(n,t)}),o&&(this.__fluent$base__=o)}return t.compose=function(e,o){return void 0===e&&(e=void 0),void 0===o&&(o=void 0),t.composeWith(new t(e,o))},t.composeWith=function(t){return new u(t)},t.prototype.toJSON=function(){var t=this;return n(this).reduce(function(e,o){var n=r(o),i=Object.getOwnPropertyDescriptor(t,n);return i?Object.defineProperty(e,o,i):e[o]=t[n],e},this.__fluent$base__?new this.__fluent$base__:{})},t}();e.FluentAssign=f},382:function(t,e,o){"use strict";var n=o(40),r=o(118),i=function(){function t(t){this.context=t,this._resultDeferred=new r.PromiseCompleter,this._onDestroy=new n.Subject,this.onDestroy=this._onDestroy.asObservable()}return Object.defineProperty(t.prototype,"result",{get:function(){return this._resultDeferred.promise},enumerable:!0,configurable:!0}),t.prototype.close=function(t){var e=this;void 0===t&&(t=null);var o=function(){e.destroy(),e._resultDeferred.resolve(t)};this._fireHook("beforeClose").then(function(t){return t!==!0&&o()})["catch"](o)},t.prototype.dismiss=function(){var t=this,e=function(){t.destroy(),t._resultDeferred.reject()};this._fireHook("beforeDismiss").then(function(t){return t!==!0&&e()})["catch"](e)},t.prototype.destroy=function(){this._onDestroy.next(null),this._onDestroy.complete()},t.prototype._fireHook=function(t){var e=this.contentRef&&this.contentRef.instance,o=e&&"function"==typeof e[t]&&e[t];return Promise.resolve(!!o&&o.call(e))},t}();e.DialogRef=i},383:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},i=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=o(1),s=o(381),c=o(118);e.DEFAULT_VALUES={isBlocking:!0,keyboard:[27],supportsKey:function(t){return this.keyboard.indexOf(t)>-1}};var l=["isBlocking","keyboard","message"],d=function(){function t(){}return t.prototype.normalize=function(){this.isBlocking!==!1&&(this.isBlocking=!0),null===this.keyboard?this.keyboard=[]:"number"==typeof this.keyboard?this.keyboard=[this.keyboard]:Array.isArray(this.keyboard)||(this.keyboard=e.DEFAULT_VALUES.keyboard)},t}();e.ModalContext=d;var u=function(t){function o(o,n,r){void 0===o&&(o=void 0),void 0===n&&(n=void 0),void 0===r&&(r=void 0),t.call(this,c.extend(e.DEFAULT_VALUES,o||{}),c.arrayUnion(l,n||[]),r)}return n(o,t),o=r([a.Injectable(),i("design:paramtypes",[Object,Array,Function])],o)}(s.FluentAssign);e.ModalContextBuilder=u},384:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(7),s=0,c=function(){function t(t){var e=this;this.fadeState="in",this.hs={ps:null,sz:null,pt:null},s++,document.body.classList.add("modal-open"),t.inElement&&(this.hs.ps="absolute",this.hs.sz="100%",this.hs.pt="0"),t.onDestroy.subscribe(function(){return e.fadeState="out"})}return t.prototype.canDestroy=function(){return new Promise(function(t){setTimeout(function(){return t()},310)})},t.prototype.ngOnDestroy=function(){0===--s&&document.body.classList.remove("modal-open")},t=n([i.Component({selector:"modal-backdrop",host:{"[style.position]":"hs.ps","[style.height]":"hs.sz","[style.width]":"hs.sz","[style.top]":"hs.pt","[style.left]":"hs.pt","[style.right]":"hs.pt","[style.bottom]":"hs.pt"},animations:[i.trigger("fade",[i.transition("void => in",[i.animate("150ms linear",i.keyframes([i.style({opacity:0}),i.style({opacity:.5})]))]),i.state("out",i.style({opacity:0})),i.transition("* => out",[i.animate("150ms linear",i.keyframes([i.style({opacity:.5}),i.style({opacity:.5})])),i.animate("150ms linear",i.keyframes([i.style({opacity:.5}),i.style({opacity:0})]))])])],encapsulation:i.ViewEncapsulation.None,template:'<div [style.position]="hs.ps" class="modal-backdrop in" [@fade]="fadeState"></div>\n<modal-container></modal-container>'}),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof a.DialogRef&&a.DialogRef)&&e||Object])],t);var e}();e.BSModalBackdrop=c},385:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(7),s=o(242),c=function(){function t(t,e,o,n,r){var i=this;this.dialog=t,this.el=e,this._compileConfig=o,this._modal=n,this._cr=r,this.fadeState="in",t.inElement?this.position="absolute":this.position=null,t.onDestroy.subscribe(function(){return i.fadeState="out"})}return t.prototype.ngAfterViewInit=function(){var t=this;this.el.nativeElement&&this.el.nativeElement.focus(),setTimeout(function(){t.dialog.contentRef=a.createComponent(t._cr,t._compileConfig.component,t._viewContainer,t._compileConfig.bindings)})},t.prototype.onClickOutside=function(){this._modal.isTopMost(this.dialog)&&!this.dialog.context.isBlocking&&this.dialog.dismiss()},t.prototype.documentKeypress=function(t){this._modal.isTopMost(this.dialog)&&a.supportsKey(t.keyCode,this.dialog.context.keyboard)&&this.dialog.dismiss()},n([i.ViewChild("modalDialog",{read:i.ViewContainerRef}),r("design:type","function"==typeof(e="undefined"!=typeof i.ViewContainerRef&&i.ViewContainerRef)&&e||Object)],t.prototype,"_viewContainer",void 0),t=n([i.Component({selector:"modal-container",host:{tabindex:"-1",role:"dialog","class":"modal",style:"display: block","[style.position]":"position","(body:keydown)":"documentKeypress($event)"},animations:[i.trigger("fade",[i.transition("void => in",[i.animate("100ms linear",i.keyframes([i.style({opacity:0,transform:"translate(0, -25%)"}),i.style({opacity:0,transform:"translate(0, -25%)"})])),i.animate("300ms linear",i.keyframes([i.style({opacity:0,transform:"translate(0, -25%)",offset:0}),i.style({opacity:1,transform:"translate(0, -12.5%)",offset:.5}),i.style({opacity:1,transform:"translate(0, 0)",offset:1})]))]),i.state("out",i.style({opacity:0,transform:"translate(0, -25%)"})),i.transition("in => out",[i.animate("150ms linear",i.keyframes([i.style({opacity:1,transform:"translate(0, 0)"}),i.style({opacity:0,transform:"translate(0, -12.5%)"})]))])])],encapsulation:i.ViewEncapsulation.None,template:'<div [ngClass]="dialog.context.dialogClass" \n          [class.modal-lg]="dialog.context.size == \'lg\'"\n          [class.modal-sm]="dialog.context.size == \'sm\'"\n          [@fade]="fadeState">\n         <div class="modal-content"              \n              style="display:block"              \n              role="document"\n              (clickOutside)="onClickOutside()">\n            <div style="display: none" #modalDialog></div>\n         </div>\n    </div>'}),r("design:paramtypes",["function"==typeof(o="undefined"!=typeof a.DialogRef&&a.DialogRef)&&o||Object,"function"==typeof(c="undefined"!=typeof i.ElementRef&&i.ElementRef)&&c||Object,"function"==typeof(l="undefined"!=typeof a.ModalCompileConfig&&a.ModalCompileConfig)&&l||Object,"function"==typeof(d="undefined"!=typeof s.Modal&&s.Modal)&&d||Object,"function"==typeof(u="undefined"!=typeof i.ComponentFactoryResolver&&i.ComponentFactoryResolver)&&u||Object])],t);var e,o,c,l,d,u}();e.BSModalContainer=c},386:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i={dialogClass:"modal-dialog",showClose:!1},a=["dialogClass","size","showClose"],s=function(t){function e(){t.apply(this,arguments)}return n(e,t),e.prototype.normalize=function(){this.dialogClass||(this.dialogClass=i.dialogClass),t.prototype.normalize.call(this)},e}(r.ModalOpenContext);e.BSModalContext=s;var c=function(t){function e(e,o,n){void 0===e&&(e=void 0),void 0===o&&(o=void 0),void 0===n&&(n=void 0),t.call(this,r.extend(i,e||{}),r.arrayUnion(a,o||[]),n||s)}return n(e,t),e}(r.ModalOpenContextBuilder);e.BSModalContextBuilder=c},387:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=function(){function t(){this.onButtonClick=new i.EventEmitter}return t.prototype.onClick=function(t,e){e.stopPropagation(),this.onButtonClick.emit({btn:t,$event:e})},n([i.Input(),r("design:type",String)],t.prototype,"footerClass",void 0),n([i.Input(),r("design:type",Array)],t.prototype,"buttons",void 0),n([i.Output(),r("design:type",Object)],t.prototype,"onButtonClick",void 0),t=n([i.Component({selector:"modal-footer",encapsulation:i.ViewEncapsulation.None,template:'<div [ngClass]="footerClass">\n    <button *ngFor="let btn of buttons;"\n            [ngClass]="btn.cssClass"\n            (click)="onClick(btn, $event)">{{btn.caption}}</button>\n</div>'}),r("design:paramtypes",[])],t)}();e.BSModalFooter=a},388:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i=o(243),a=function(t){function e(e,o){void 0===o&&(o=void 0),t.call(this,r.extend({modal:e,okBtn:"OK",okBtnClass:"btn btn-primary"},o||{}),["okBtn","okBtnClass"])}return n(e,t),e.prototype.$$beforeOpen=function(e){return this.addButton(e.okBtnClass,e.okBtn,function(t,e){return t.dialog.close(!0)}),t.prototype.$$beforeOpen.call(this,e)},e}(i.MessageModalPresetBuilder);e.OneButtonPresetBuilder=a},389:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i=o(243),a=function(t){function e(e,o){void 0===o&&(o=void 0),t.call(this,r.extend({modal:e,okBtn:"OK",okBtnClass:"btn btn-primary",cancelBtn:"Cancel",cancelBtnClass:"btn btn-default"},o||{}),["okBtn","okBtnClass","cancelBtn","cancelBtnClass"])}return n(e,t),e.prototype.$$beforeOpen=function(e){return this.addButton(e.okBtnClass,e.okBtn,function(t,e){return t.dialog.close(!0)}).addButton(e.cancelBtnClass,e.cancelBtn,function(t,e){return t.dialog.dismiss()}),t.prototype.$$beforeOpen.call(this,e)},e}(i.MessageModalPresetBuilder);e.TwoButtonPresetBuilder=a},390:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(7),s=function(){function t(){}return t.prototype.render=function(t,e,o,n){var r;switch(n.context.dialogType){case a.DROP_IN_TYPE.alert:window.alert(n.context.message),r=!0;break;case a.DROP_IN_TYPE.prompt:r=window.prompt(n.context.message,n.context.promptDefault);break;case a.DROP_IN_TYPE.confirm:r=window.confirm(n.context.message)}return n.destroy=function(){},r===!1?n.dismiss():n.close(r),n},t=n([i.Injectable(),r("design:paramtypes",[])],t)}();e.JSNativeModalRenderer=s},391:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i=["promptDefault"],a=function(t){function e(){t.apply(this,arguments)}return n(e,t),e.prototype.normalize=function(){this.message||(this.message=""),void 0===this.dialogType&&(this.dialogType=r.DROP_IN_TYPE.alert)},e}(r.ModalOpenContext);e.JSNativeModalContext=a;var s=function(t){function e(e,o,n){void 0===e&&(e=void 0),void 0===o&&(o=void 0),void 0===n&&(n=void 0),t.call(this,e||{},r.arrayUnion(i,o||[]),n||a)}return n(e,t),e}(r.ModalOpenContextBuilder);e.JSNativeModalContextBuilder=s},392:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(245),i=o(391),a=function(t){function e(e,o){t.call(this,{modal:e,dialogType:o})}return n(e,t),e.prototype.$$beforeOpen=function(t){return[]},e.prototype.open=function(t){var e=this.toJSON();if(!(e.modal instanceof r.Modal))return Promise.reject(new Error("Configuration Error: modal service not set."));var o="function"==typeof this.$$beforeOpen&&this.$$beforeOpen(e);return e.modal.open(!0,e,o,!0)},e}(i.JSNativeModalContextBuilder);e.JSNativePresetBuilder=a},393:function(t,e,o){"use strict";var n=o(165);e.Modal=n.Modal;var r=o(394);e.VexModalBackdrop=r.VexModalBackdrop;var i=o(395);e.VexModalContent=i.VexModalContent;var a=o(396);e.VEXBuiltInThemes=a.VEXBuiltInThemes,e.VEXModalContext=a.VEXModalContext,e.VEXModalContextBuilder=a.VEXModalContextBuilder;var s=o(398);e.DropInPreset=s.DropInPreset,e.DropInPresetBuilder=s.DropInPresetBuilder;var c=o(164);e.DialogFormModal=c.DialogFormModal,e.FormDropIn=c.FormDropIn,e.VEXButtonClickEvent=c.VEXButtonClickEvent,e.VEXButtonConfig=c.VEXButtonConfig,e.VEXButtonHandler=c.VEXButtonHandler,e.VEXDialogButtons=c.VEXDialogButtons;var l=o(397);e.DialogPreset=l.DialogPreset,e.DialogPresetBuilder=l.DialogPresetBuilder;var d=o(562);e.VexModalModule=d.VexModalModule},394:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(7),s=o(165),c=0,l=function(){function t(t,e){this.dialog=t,this._modal=e,this.hs={},c++,document.body.classList.add("vex-open"),t.inElement&&(this.hs.ps="absolute",this.hs.sz="100%",this.hs.pt=0)}return Object.defineProperty(t.prototype,"cssClass",{get:function(){return"vex vex-theme-"+this.dialog.context.className},enumerable:!0,configurable:!0}),t.prototype.ngOnDestroy=function(){0===--c&&document.body.classList.remove("vex-open")},t.prototype.documentKeypress=function(t){this._modal.isTopMost(this.dialog)&&a.supportsKey(t.keyCode,this.dialog.context.keyboard)&&this.dialog.dismiss()},t=n([i.Component({selector:"modal-backdrop",host:{"[class.in-element]":"dialog.inElement","[style.position]":"hs.ps","[style.height]":"hs.sz","[style.width]":"hs.sz","[style.top]":"hs.pt","[style.left]":"hs.pt","[style.right]":"hs.pt","[style.bottom]":"hs.pt","(body:keydown)":"documentKeypress($event)"},styleUrls:["components/angular2-modal/plugins/vex/modal-backdrop.css"],encapsulation:i.ViewEncapsulation.None,template:'<div [class]="cssClass">\n    <div [class]="dialog.context.overlayClassName"></div>\n    <modal-content></modal-content>    \n</div>'}),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof a.DialogRef&&a.DialogRef)&&e||Object,"function"==typeof(o="undefined"!=typeof s.Modal&&s.Modal)&&o||Object])],t);var e,o}();e.VexModalBackdrop=l},395:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(7),s=o(165),c=function(){function t(t,e,o,n){this.dialog=t,this._modal=e,this._compileConfig=o,this._cr=n,this.context=t.context}return t.prototype.ngAfterViewInit=function(){var t=this;this.dlgContainer.nativeElement&&this.dlgContainer.nativeElement.focus(),setTimeout(function(){t.dialog.contentRef=a.createComponent(t._cr,t._compileConfig.component,t._viewContainer,t._compileConfig.bindings)})},t.prototype.onClickOutside=function(){this._modal.isTopMost(this.dialog)&&!this.dialog.context.isBlocking&&this.dialog.dismiss()},n([i.ViewChild("dlgContainer"),r("design:type","function"==typeof(e="undefined"!=typeof i.ElementRef&&i.ElementRef)&&e||Object)],t.prototype,"dlgContainer",void 0),n([i.ViewChild("modalDialog",{read:i.ViewContainerRef}),r("design:type","function"==typeof(o="undefined"!=typeof i.ViewContainerRef&&i.ViewContainerRef)&&o||Object)],t.prototype,"_viewContainer",void 0),t=n([i.Component({selector:"modal-content",template:'<div tabindex="-1" role="dialog"\n      [class]="context.contentClassName" (clickOutside)="onClickOutside()" #dlgContainer>\n    <div style="display: none" #modalDialog></div>    \n    <div *ngIf="context.showCloseButton" \n         [class]="context.closeClassName" \n         (click)="dialog.dismiss()"></div>\n</div>',encapsulation:i.ViewEncapsulation.None}),r("design:paramtypes",["function"==typeof(c="undefined"!=typeof a.DialogRef&&a.DialogRef)&&c||Object,"function"==typeof(l="undefined"!=typeof s.Modal&&s.Modal)&&l||Object,"function"==typeof(d="undefined"!=typeof a.ModalCompileConfig&&a.ModalCompileConfig)&&d||Object,"function"==typeof(u="undefined"!=typeof i.ComponentFactoryResolver&&i.ComponentFactoryResolver)&&u||Object])],t);var e,o,c,l,d,u}();e.VexModalContent=c},396:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);
t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i={className:"default",overlayClassName:"vex-overlay",contentClassName:"vex-content",closeClassName:"vex-close"},a=["className","overlayClassName","contentClassName","closeClassName","showCloseButton"],s=function(t){function e(){t.apply(this,arguments)}return n(e,t),e}(r.ModalOpenContext);e.VEXModalContext=s;var c=function(t){function e(e,o,n){void 0===e&&(e=void 0),void 0===o&&(o=void 0),void 0===n&&(n=void 0),t.call(this,r.extend(i,e||{}),r.arrayUnion(a,o||[]),n||s)}return n(e,t),e.prototype.overlayClosesOnClick=function(t){return this[r.privateKey("isBlocking")]=!t,this},e}(r.ModalOpenContextBuilder);e.VEXModalContextBuilder=c},397:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i=o(396),a=o(164),s=["content"],c=function(t){function e(){t.apply(this,arguments)}return n(e,t),e}(i.VEXModalContext);e.DialogPreset=c;var l=function(t){function e(e,o,n,i){void 0===o&&(o=void 0),void 0===n&&(n=void 0),void 0===i&&(i=void 0),t.call(this,r.extend({modal:e,component:a.DialogFormModal,buttons:[],defaultResult:!0},o||{}),r.arrayUnion(s,n||[]),i||c)}return n(e,t),e.prototype.addButton=function(t,e,o){var n={cssClass:t,caption:e,onClick:o},i=r.privateKey("buttons");return this[i].push(n),this},e.prototype.addOkButton=function(t){return void 0===t&&(t="OK"),this.addButton("vex-dialog-button-primary vex-dialog-button vex-first",t,function(t,e){return t.dialog.close(t.dialog.context.defaultResult)}),this},e.prototype.addCancelButton=function(t){return void 0===t&&(t="CANCEL"),this.addButton("vex-dialog-button-secondary vex-dialog-button vex-last",t,function(t,e){return t.dialog.dismiss()}),this},e}(i.VEXModalContextBuilder);e.DialogPresetBuilder=l},398:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i=o(164),a=o(397),s={component:i.DialogFormModal,content:i.FormDropIn,okBtn:"OK",cancelBtn:"Cancel"},c=["okBtn","cancelBtn","placeholder","showCloseButton"],l=function(t){function e(){t.apply(this,arguments)}return n(e,t),Object.defineProperty(e.prototype,"showInput",{get:function(){return this.dropInType===r.DROP_IN_TYPE.prompt},enumerable:!0,configurable:!0}),e}(a.DialogPreset);e.DropInPreset=l;var d=function(t){function e(e,o,n){void 0===n&&(n=void 0),t.call(this,e,r.extend(r.extend({modal:e,dropInType:o},s),n||{}),c,l)}return n(e,t),e.prototype.$$beforeOpen=function(e){switch(e.okBtn&&this.addOkButton(e.okBtn),e.dropInType){case r.DROP_IN_TYPE.prompt:e.defaultResult=void 0;case r.DROP_IN_TYPE.confirm:e.cancelBtn&&this.addCancelButton(e.cancelBtn)}return t.prototype.$$beforeOpen.call(this,e)},e}(a.DialogPresetBuilder);e.DropInPresetBuilder=d},399:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(380),s=function(){function t(t){this._cr=t}return t.prototype.render=function(t,e,o,n){var r=a["default"](this._cr,t,e,o);return n.inElement?e.element.nativeElement.appendChild(r.location.nativeElement):document.body.appendChild(r.location.nativeElement),n.onDestroy.subscribe(function(){"function"==typeof r.instance.canDestroy?r.instance.canDestroy().then(function(){return r.destroy()}):r.destroy()}),n},t=n([i.Injectable(),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof i.ComponentFactoryResolver&&i.ComponentFactoryResolver)&&e||Object])],t);var e}();e.DOMModalRenderer=s},400:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(163),s=o(247),c=o(401),l=o(570),d=function(){function t(t){var e=this;this.modal=t,this.modalCommands=[{text:"alert drop in",factory:function(){return l.alert(e.modal).open()}},{text:"prompt drop in",factory:function(){return l.prompt(e.modal).open()}},{text:"confirm drop in",factory:function(){return l.confirm(e.modal).open()}},{text:"Cascading example",factory:function(){return l.cascading(e.modal).open()}},{text:"In Element example",factory:function(){return l.inElement(e.modal).open(e.demoHead.vcCommands)}},{text:"Custom Modal example",factory:function(){return e.modal.open(c.AdditionCalculateWindow,new c.AdditionCalculateWindowData(2,3))}}]}return n([i.ViewChild(s.DemoHead),r("design:type","function"==typeof(e="undefined"!=typeof s.DemoHead&&s.DemoHead)&&e||Object)],t.prototype,"demoHead",void 0),t=n([i.Component({selector:"bootstrap-demo-page",styleUrls:["demo/app/bootstrap-demo/bootstrap-demo-page/bootstrap-demo-page.css"],templateUrl:"demo/app/bootstrap-demo/bootstrap-demo-page/bootstrap-demo-page.tpl.html"}),r("design:paramtypes",["function"==typeof(o="undefined"!=typeof a.Modal&&a.Modal)&&o||Object])],t);var e,o}();e.BootstrapDemoPage=d},401:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},i=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=o(1),s=o(7),c=o(163),l=function(t){function e(e,o){t.call(this),this.num1=e,this.num2=o}return n(e,t),e}(c.BSModalContext);e.AdditionCalculateWindowData=l;var d=function(){function t(t){this.dialog=t,this.context=t.context,this.wrongAnswer=!0}return t.prototype.onKeyUp=function(t){this.wrongAnswer=5!=t,this.dialog.close()},t.prototype.beforeDismiss=function(){return!0},t.prototype.beforeClose=function(){return this.wrongAnswer},t=r([a.Component({selector:"modal-content",styles:["\n        .custom-modal-container {\n            padding: 15px;\n        }\n\n        .custom-modal-header {\n            background-color: #219161;\n            color: #fff;\n            -webkit-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.75);\n            -moz-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.75);\n            box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.75);\n            margin-top: -15px;\n            margin-bottom: 40px;\n        }\n    "],template:'\n        <div class="container-fluid custom-modal-container">\n            <div class="row custom-modal-header">\n                <div class="col-sm-12">\n                    <h1>A Custom modal design</h1>\n                </div>\n            </div>\n            <div class="row" [ngClass]="{\'myclass\' : shouldUseMyClass}">\n                <div class="col-xs-12">\n                    <div class="jumbotron">\n                        <h1>Do the math to quit:</h1>\n                        <p class="lead">I received an injection of the number <strong>{{context.num1}}</strong> and the number <strong>{{context.num2}}</strong></p>\n                        <span>What is the sum?</span>\n                         <input class="form-control" type="text" #answer (keyup)="onKeyUp(answer.value)" autofocus>\n                    </div>\n                </div>\n            </div>\n        </div>'}),i("design:paramtypes",["function"==typeof(e="undefined"!=typeof s.DialogRef&&s.DialogRef)&&e||Object])],t);var e}();e.AdditionCalculateWindow=d},402:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(163),s=function(){function t(t,e){this.modal=t,t.defaultViewContainer=e}return t=n([i.Component({selector:"bootstrap-demo",template:"<router-outlet></router-outlet>",providers:a.BootstrapModalModule.getProviders(),encapsulation:i.ViewEncapsulation.None}),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof a.Modal&&a.Modal)&&e||Object,"function"==typeof(o="undefined"!=typeof i.ViewContainerRef&&i.ViewContainerRef)&&o||Object])],t);var e,o}();e.BootstrapDemo=s},403:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(404),s=function(){function t(t){this.modal=t}return t.prototype.ngAfterViewInit=function(){this.modal.alert().title("Angular 2 Modal").templateRef(this.myTemplate).open(this.injectVC)},n([i.ViewChild("injectPoint",{read:i.ViewContainerRef}),r("design:type","function"==typeof(e="undefined"!=typeof i.ViewContainerRef&&i.ViewContainerRef)&&e||Object)],t.prototype,"injectVC",void 0),n([i.ViewChild("myTemplate",{read:i.TemplateRef}),r("design:type","function"==typeof(o="undefined"!=typeof i.TemplateRef&&i.TemplateRef)&&o||Object)],t.prototype,"myTemplate",void 0),t=n([i.Component({selector:"home",providers:a.InAppModalModule.getProviders(),templateUrl:"demo/app/home/home.tpl.html",encapsulation:i.ViewEncapsulation.None}),r("design:paramtypes",["function"==typeof(s="undefined"!=typeof a.Modal&&a.Modal)&&s||Object])],t);var e,o,s}();e.Home=s},404:function(t,e,o){"use strict";function n(){return[{provide:u.Modal,useClass:c.Modal},{provide:c.Modal,useClass:c.Modal},{provide:u.ModalBackdropComponent,useValue:l.InAppModalBackdrop},{provide:u.ModalDropInFactory,useValue:{alert:function(t){return new d.InAppModalContextBuilder(t)},prompt:void 0,confirm:void 0}}]}var r=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},i=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=o(1),s=o(20),c=o(248),l=o(572),d=o(405),u=o(7),f=o(248);e.Modal=f.Modal;var p=o(405);e.InAppModalContext=p.InAppModalContext,e.InAppModalContextBuilder=p.InAppModalContextBuilder;var m=function(){function t(){}return t.getProviders=function(){return n()},t=r([a.NgModule({imports:[s.CommonModule],declarations:[l.InAppModalBackdrop],providers:n(),entryComponents:[l.InAppModalBackdrop]}),i("design:paramtypes",[])],t)}();e.InAppModalModule=m},405:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(7),i=function(t){function e(){t.apply(this,arguments)}return n(e,t),e.prototype.normalize=function(){this.message||(this.message="")},e}(r.ModalOpenContext);e.InAppModalContext=i;var a=function(t){function e(e){t.call(this,{modal:e},["title","templateRef"],i)}return n(e,t),e}(r.ModalOpenContextBuilder);e.InAppModalContextBuilder=a},406:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(244),s=o(575),c=function(){function t(t){var e=this;this.modal=t,this.modalCommands=["alert","prompt","confirm"].map(function(t){return{text:t+" drop in",factory:function(){return s[t](e.modal).open()}}})}return t=n([i.Component({selector:"js-native-demo",templateUrl:"demo/app/js-native-demo/js-native-demo.tpl.html",providers:a.JSNativeModalModule.getProviders(),encapsulation:i.ViewEncapsulation.None}),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof a.Modal&&a.Modal)&&e||Object])],t);var e}();e.JSNativeDemo=c},407:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(7),s=function(){function t(t){this.dialog=t,this.context=t.context}return t=n([i.Component({selector:"login-dialog",encapsulation:i.ViewEncapsulation.None,template:'<div class="vex-dialog-message">{{context.message}}</div>\n    <div *ngIf="context.showInput" class="vex-dialog-input">\n        <input name="vex" \n               type="text" \n               class="vex-dialog-prompt-input"\n               [(ngModel)]="context.defaultResult" \n               placeholder="{{context.placeholder}}">\n    </div>'}),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof a.DialogRef&&a.DialogRef)&&e||Object])],t);var e}();e.LoginDialog=s},408:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(393),s=o(247),c=o(576),l=o(407),d=function(){function t(t,e){var o=this;this.modal=t,this.theme="default",this.modal.defaultViewContainer=e,this.modalCommands=[{text:"alert drop in",factory:function(){return c.alert.call(o,o.modal).open()}},{text:"prompt drop in",factory:function(){return c.prompt.call(o,o.modal).open()}},{text:"confirm drop in",factory:function(){return c.confirm.call(o,o.modal).open()}},{text:"Cascading example",factory:function(){return c.cascading.call(o,o.modal).open()}},{text:"In Element example",factory:function(){return c.alert.call(o,o.modal).open(o.demoHead.vcCommands)}},{text:"Custom Modal example",factory:function(){return new a.DialogPresetBuilder(o.modal).className(o.theme).content(l.LoginDialog).message("Ary you coming to the event?").addOkButton("Yep!").addButton("vex-dialog-button-primary vex-dialog-button","Maybe?",function(t,e){return t.dialog.close("Maybe")}).addCancelButton("Nope!").open()}},{text:"no buttons",factory:function(){return c.noButtons.call(o,o.modal).open()}},{text:"custom buttons",factory:function(){return c.customButtons.call(o,o.modal).open()}}]}return n([i.ViewChild(s.DemoHead),r("design:type","function"==typeof(e="undefined"!=typeof s.DemoHead&&s.DemoHead)&&e||Object)],t.prototype,"demoHead",void 0),t=n([i.Component({selector:"vex-demo",styleUrls:["demo/app/vex-demo//css/vex.css","demo/app/vex-demo//css/vex-theme-default.css","demo/app/vex-demo//css/vex-theme-os.css","demo/app/vex-demo//css/vex-theme-plain.css","demo/app/vex-demo//css/vex-theme-wireframe.css","demo/app/vex-demo//css/vex-theme-flat-attack.css","demo/app/vex-demo//css/vex-theme-top.css","demo/app/vex-demo//css/vex-theme-bottom-right-corner.css"],templateUrl:"demo/app/vex-demo/vex-demo.tpl.html",providers:a.VexModalModule.getProviders(),encapsulation:i.ViewEncapsulation.None}),r("design:paramtypes",["function"==typeof(o="undefined"!=typeof a.Modal&&a.Modal)&&o||Object,"function"==typeof(d="undefined"!=typeof i.ViewContainerRef&&i.ViewContainerRef)&&d||Object])],t);var e,o,d}();e.VexDemo=d},557:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(94),s=o(246),c=o(240),l=o(399),d=function(){function t(){}return t.forRoot=function(){return{ngModule:t,providers:[{provide:c.ModalRenderer,useClass:l.DOMModalRenderer},{provide:a.EVENT_MANAGER_PLUGINS,useClass:s.DOMOutsideEventPlugin,multi:!0}]}},t=n([i.NgModule({}),r("design:paramtypes",[])],t)}();e.ModalModule=d},558:function(t,e){"use strict";var o=function(){function t(){this._stack=[]}return t.prototype.push=function(t){var e=this._stack.indexOf(t);e===-1&&this._stack.push(t)},t.prototype.pushManaged=function(t){this.push(t)},t.prototype.pop=function(){this._stack.pop()},t.prototype.remove=function(t){var e=this._stack.indexOf(t);e>-1&&this._stack.splice(e,1)},t.prototype.index=function(t){return this._stack[t]},t.prototype.indexOf=function(t){return this._stack.indexOf(t)},Object.defineProperty(t.prototype,"length",{get:function(){return this._stack.length},enumerable:!0,configurable:!0}),t}();e.DialogRefStack=o},559:function(t,e,o){"use strict";var n=this&&this.__extends||function(t,e){function o(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},r=o(246),i=o(383),a=o(118),s=["component"],c=function(t){function e(){t.apply(this,arguments)}return n(e,t),e}(i.ModalContext);e.ModalOpenContext=c;var l=function(t){function e(e,o,n){void 0===e&&(e=void 0),void 0===o&&(o=void 0),void 0===n&&(n=void 0),t.call(this,e||{},a.arrayUnion(s,o||[]),n)}return n(e,t),e.prototype.$$beforeOpen=function(t){return[]},e.prototype.open=function(t){var e=this.toJSON();if(!(e.modal instanceof r.Modal))return Promise.reject(new Error("Configuration Error: modal service not set."));var o="function"==typeof this.$$beforeOpen&&this.$$beforeOpen(e);return e.modal.open(e.component,e,o,t)},e}(i.ModalContextBuilder);e.ModalOpenContextBuilder=l},560:function(t,e,o){"use strict";function n(){return[{provide:y.Modal,useClass:c.Modal},{provide:c.Modal,useClass:c.Modal},{provide:y.ModalBackdropComponent,useValue:l.BSModalBackdrop},{provide:y.ModalDropInFactory,useValue:{alert:function(t){return new p.OneButtonPresetBuilder(t,{isBlocking:!1})},prompt:function(t){return new p.OneButtonPresetBuilder(t,{isBlocking:!0,keyboard:null})},confirm:function(t){return new m.TwoButtonPresetBuilder(t,{isBlocking:!0,keyboard:null})}}}]}var r=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},i=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=o(1),s=o(20),c=o(242),l=o(384),d=o(241),u=o(385),f=o(387),p=o(388),m=o(389),y=o(7),h=function(){function t(){}return t.getProviders=function(){return n()},t=r([a.NgModule({imports:[s.CommonModule],declarations:[l.BSModalBackdrop,d.BSMessageModal,u.BSModalContainer,f.BSModalFooter],providers:n(),entryComponents:[l.BSModalBackdrop,d.BSMessageModal]}),i("design:paramtypes",[])],t)}();e.BootstrapModalModule=h},561:function(t,e,o){"use strict";function n(){return[{provide:d.Modal,useClass:s.Modal},{provide:s.Modal,useClass:s.Modal},{provide:d.ModalRenderer,useClass:c.JSNativeModalRenderer},{provide:d.ModalBackdropComponent,useValue:{}},{provide:d.ModalDropInFactory,useValue:{alert:function(t){return new l.JSNativePresetBuilder(t,d.DROP_IN_TYPE.alert)},prompt:function(t){return new l.JSNativePresetBuilder(t,d.DROP_IN_TYPE.prompt)},confirm:function(t){return new l.JSNativePresetBuilder(t,d.DROP_IN_TYPE.confirm)}}}]}var r=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},i=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=o(1),s=o(245),c=o(390),l=o(392),d=o(7),u=function(){function t(){}return t.getProviders=function(){return n()},t=r([a.NgModule({providers:n()}),i("design:paramtypes",[])],t)}();e.JSNativeModalModule=u},562:function(t,e,o){"use strict";function n(){return[{provide:l.Modal,useClass:c.Modal},{provide:c.Modal,useClass:c.Modal},{provide:l.ModalBackdropComponent,useValue:u.VexModalBackdrop},{provide:l.ModalDropInFactory,useValue:{alert:function(t){return new d.DropInPresetBuilder(t,l.DROP_IN_TYPE.alert,{isBlocking:!1})},prompt:function(t){return new d.DropInPresetBuilder(t,l.DROP_IN_TYPE.prompt,{isBlocking:!0,keyboard:null})},confirm:function(t){return new d.DropInPresetBuilder(t,l.DROP_IN_TYPE.confirm,{isBlocking:!0,keyboard:null})}}}]}var r=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},i=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=o(1),s=o(20),c=o(165),l=o(7),d=o(398),u=o(394),f=o(395),p=o(164),m=function(){function t(){}return t.getProviders=function(){return n()},t=r([a.NgModule({imports:[s.CommonModule],declarations:[u.VexModalBackdrop,f.VexModalContent,p.DialogFormModal,p.FormDropIn,p.VEXDialogButtons],providers:n(),entryComponents:[u.VexModalBackdrop,p.DialogFormModal,p.FormDropIn]}),i("design:paramtypes",[])],t)}();e.VexModalModule=m},563:function(t,e,o){"use strict";function n(t){return t?["alert","prompt","confirm"].reduce(function(t,e){return"function"!=typeof t[e]&&(t[e]=f),t},t):p}var r=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},i=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=this&&this.__param||function(t,e){return function(o,n){e(o,n,t)}},s=o(1),c=o(240),l=o(558),d=o(382),u=new l.DialogRefStack,f=function(){throw new Error("Unsupported Drop-in.")},p={alert:f,prompt:f,confirm:f},m=function(){function t(t,e,o){this._modalRenderer=t,this._backdrop=e,this._dropIn=n(o)}return t.prototype.alert=function(){return this._dropIn.alert(this)},t.prototype.prompt=function(){return this._dropIn.prompt(this)},t.prototype.confirm=function(){return this._dropIn.confirm(this)},t.prototype.open=function(e,o,n,r,i){if(void 0===o&&(o=void 0),void 0===n&&(n=void 0),void 0===r&&(r=void 0),i=void 0===i?!!r:!!i,!r){if(!this.defaultViewContainer)throw new Error("defaultViewContainer not set.");r=this.defaultViewContainer}o&&o.normalize();var a=new d.DialogRef(o||{});a.inElement=i;var l=new c.ModalCompileConfig(e,n||[]),f=s.ReflectiveInjector.resolve([{provide:t,useValue:this},{provide:c.ModalRenderer,useValue:this._modalRenderer},{provide:d.DialogRef,useValue:a},{provide:c.ModalCompileConfig,useValue:l}]);return this._modalRenderer.render(this._backdrop,r,f,a),u.pushManaged(a),a.onDestroy.subscribe(function(){return u.remove(a)}),Promise.resolve(a)},t.prototype.isTopMost=function(t){return u.indexOf(t)===u.length-1},t.prototype.stackPosition=function(t){return u.indexOf(t)},Object.defineProperty(t.prototype,"stackLength",{get:function(){return u.length},enumerable:!0,configurable:!0}),t=r([s.Injectable(),a(2,s.Optional()),i("design:paramtypes",["function"==typeof(e="undefined"!=typeof c.ModalRenderer&&c.ModalRenderer)&&e||Object,"function"==typeof(o="undefined"!=typeof c.ModalBackdropComponent&&c.ModalBackdropComponent)&&o||Object,"function"==typeof(l="undefined"!=typeof c.ModalDropInFactory&&c.ModalDropInFactory)&&l||Object])],t);var e,o,l}();e.Modal=m},564:function(t,e,o){"use strict";function n(t,e){return function(o){var n=o.target;do if(n===t)return;while(n.parentNode&&(n=n.parentNode));e(o)}}var r=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},i=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=o(1),s=o(118),c={clickOutside:"click",mousedownOutside:"mousedown",mouseupOutside:"mouseup",mousemoveOutside:"mousemove"},l=function(){function t(){document&&"function"==typeof document.addEventListener||(this.addEventListener=s.noop)}return t.prototype.supports=function(t){return c.hasOwnProperty(t)},t.prototype.addEventListener=function(t,e,o){var r=this.manager.getZone(),i=function(){var i=n(t,function(t){return r.runGuarded(function(){return o(t)})});return document.addEventListener(c[e],i,!1),function(){return document.removeEventListener(c[e],i,!1)}};return r.runOutsideAngular(function(){var t;return setTimeout(function(){return t=i()},0),function(){return t()}})},t.prototype.addGlobalEventListener=function(t,e,o){throw"not supported"},t=r([a.Injectable(),i("design:paramtypes",[])],t)}();e.DOMOutsideEventPlugin=l},565:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(20),s=o(94),c=o(7),l=o(166),d=o(568),u=o(577),f=o(573),p=o(567),m=o(403),y=o(566),h=o(404),v=function(){function t(){}return t=n([i.NgModule({imports:[s.BrowserModule,y.routing,l.SharedModule.forRoot(),c.ModalModule.forRoot(),d.BootstrapDemoModule,u.VexDemoModule,f.JSNativeDemoModule,h.InAppModalModule],declarations:[p.App,m.Home],bootstrap:[p.App],providers:[{provide:a.LocationStrategy,useClass:a.HashLocationStrategy}]}),r("design:paramtypes",[])],t)}();e.AppModule=v},566:function(t,e,o){"use strict";var n=o(115),r=o(403);e.routes=[{path:"home",component:r.Home},{path:"",redirectTo:"home",terminal:!0}],e.routing=n.RouterModule.forRoot(e.routes)},567:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=function(){function t(){}return t=n([i.Component({selector:"app",encapsulation:i.ViewEncapsulation.None,styleUrls:["demo/app/app.css"],templateUrl:"demo/app/app.html"}),r("design:paramtypes",[])],t)}();e.App=a},568:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(20),s=o(163),c=o(166),l=o(569),d=o(402),u=o(400),f=o(401),p=function(){function t(){}return t=n([i.NgModule({imports:[a.CommonModule,s.BootstrapModalModule,l.routing,c.SharedModule],declarations:[d.BootstrapDemo,u.BootstrapDemoPage,f.AdditionCalculateWindow],entryComponents:[f.AdditionCalculateWindow]}),r("design:paramtypes",[])],t)}();e.BootstrapDemoModule=p},569:function(t,e,o){"use strict";var n=o(115),r=o(402),i=o(400);e.routing=n.RouterModule.forChild([{path:"bootstrap-demo",component:r.BootstrapDemo,children:[{path:"",component:i.BootstrapDemoPage,terminal:!0}]}])},570:function(t,e){"use strict";function o(t){return t.alert().size("lg").showClose(!0).title("A simple Alert style modal window").body("\n        <h4>Alert is a classic (title/body/footer) 1 button modal window that \n        does not block.</h4>\n        <b>Configuration:</b>\n        <ul>\n            <li>Non blocking (click anywhere outside to dismiss)</li>\n            <li>Size large</li>\n            <li>Dismissed with default keyboard key (ESC)</li>\n            <li>Close wth button click</li>\n            <li>HTML content</li>\n        </ul>")}function n(t){return t.prompt().size("lg").title("A simple Prompt style modal window").body("\n            <h4>Prompt is a classic (title/body/footer) 1 button modal window that \n            blocks.</h4>\n            <b>Configuration:</b>\n            <ul>\n                <li>Blocks (only button click can dismiss)</li>\n                <li>Size large</li>\n                <li>Keyboard can not dismiss</li>\n                <li>HTML content</li>\n            </ul>")}function r(t){return t.confirm().size("lg").titleHtml('\n            <div class="modal-title" \n                 style="font-size: 22px; color: grey; text-decoration: underline;">\n                 A simple Confirm style modal window</div>').body("\n            <h4>Confirm is a classic (title/body/footer) 2 button modal window that blocks.</h4>\n            <b>Configuration:</b>\n            <ul>\n                <li>Blocks (only button click can close/dismiss)</li>\n                <li>Size large</li>\n                <li>Keyboard can not dismiss</li>\n                <li>HTML Title</li>\n                <li>HTML content</li>\n            </ul>");
}function i(t){var e=[];return e.push(o(t)),e.push(n(t)),e.push(r(t)),e.push(t.prompt().size("sm").title("Cascading modals!").body("Find your way out...")),{open:function(){for(var t=e.shift().open();e.length>0;)e.shift().open();return t}}}function a(t){return t.prompt().size("sm").title("A modal contained by an element").body("Try stacking up more modals!")}e.alert=o,e.prompt=n,e.confirm=r,e.cascading=i,e.inElement=a},571:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=function(){function t(){this.dropInClick=new i.EventEmitter}return t.prototype.onClick=function(t,e){this.dropInClick.emit({event:t,source:e}),this.processDialog(e.factory())},t.prototype.processDialog=function(t){var e=this;t.then(function(t){return t.result.then(function(t){e.result=t},function(){return e.result="Rejected!"})})},n([i.Input(),r("design:type",String)],t.prototype,"title",void 0),n([i.Input(),r("design:type",String)],t.prototype,"description",void 0),n([i.Input(),r("design:type",Array)],t.prototype,"modalCommands",void 0),n([i.Output(),r("design:type","function"==typeof(e="undefined"!=typeof i.EventEmitter&&i.EventEmitter)&&e||Object)],t.prototype,"dropInClick",void 0),n([i.ViewChild("commands",{read:i.ViewContainerRef}),r("design:type","function"==typeof(o="undefined"!=typeof i.ViewContainerRef&&i.ViewContainerRef)&&o||Object)],t.prototype,"vcCommands",void 0),t=n([i.Component({selector:"demo-head",styles:["\n      .btn-dropin {\n          text-transform: uppercase;\n          margin: 15px;\n          background-color: #219161;\n          border: none;\n          box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);\n          border-radius: 0;\n      }\n      "],templateUrl:"demo/app/demo-head/demo-head.html",encapsulation:i.ViewEncapsulation.Emulated}),r("design:paramtypes",[])],t);var e,o}();e.DemoHead=a},572:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(20),s=o(7),c=o(248),l=function(){function t(t,e){this.dialog=t,this._modal=e}return t=n([i.Component({selector:"modal-backdrop",directives:[a.NgTemplateOutlet],styles:["\n.in-app-modal-backdrop {\n    \n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n}","\narticle {\n    margin: auto;\n    width: 600px;\n    background: inherit;\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    border-radius: 6px;\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.25);\n    overflow: hidden;\n}\narticle:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: inherit;\n    -webkit-filter: blur(10px) saturate(2);\n    filter: blur(10px) saturate(2);\n}\narticle .title {\n    padding: 8px;    \n    background: rgba(235, 235, 235, 0.85);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n    font-size:24px;\n    text-align: center;\n}\narticle .content {\n    padding: 8px;\n    background: rgba(255, 255, 255, 0.66);\n}"],template:'<div class="in-app-modal-backdrop">\n    <article>\n        <div class="title">\n            <span>{{dialog.context.title}}</span>\n        </div>\n        <div class="content">\n            <template [ngTemplateOutlet]="dialog.context.templateRef"></template>\n        </div>\n    </article>    \n</div>'}),r("design:paramtypes",["function"==typeof(e="undefined"!=typeof s.DialogRef&&s.DialogRef)&&e||Object,"function"==typeof(o="undefined"!=typeof c.Modal&&c.Modal)&&o||Object])],t);var e,o}();e.InAppModalBackdrop=l},573:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(20),s=o(166),c=o(244),l=o(574),d=o(406),u=function(){function t(){}return t=n([i.NgModule({imports:[a.CommonModule,c.JSNativeModalModule,l.routing,s.SharedModule],declarations:[d.JSNativeDemo]}),r("design:paramtypes",[])],t)}();e.JSNativeDemoModule=u},574:function(t,e,o){"use strict";var n=o(115),r=o(406);e.routing=n.RouterModule.forChild([{path:"js-native-demo",component:r.JSNativeDemo}])},575:function(t,e,o){"use strict";function n(t){return t.alert().message("This is a native alert!")}function r(t){return t.prompt().message("This is a native prompt!").promptDefault("This is a default value")}function i(t){return t.confirm().message("Yes or No?")}var a=o(244);e.JSNativeModal=a.JSNativeModal,e.JSNativePresetBuilder=a.JSNativePresetBuilder,e.alert=n,e.prompt=r,e.confirm=i},576:function(t,e){"use strict";function o(t){return t.alert().className(this.theme).message("An alert message!").showCloseButton(!0)}function n(t){return t.prompt().className(this.theme).message("Please type a value!").placeholder("This is a placeholder")}function r(t){return t.confirm().className(this.theme).message("Yes or No?").okBtn("Yes").cancelBtn("No")}function i(t){return t.alert().className(this.theme).showCloseButton(!0).isBlocking(!0).message("Luckily I have an X button, phew...").okBtn(null).cancelBtn(null)}function a(t){return t.alert().className(this.theme).showCloseButton(!0).isBlocking(!0).message("Let's show some bootstrap style buttons...").okBtn(null).cancelBtn(null).addButton("btn-primary","BTN-PRIMARY",function(t,e){return t.dialog.close("primary")}).addButton("btn-warning","BTN-WARNING",function(t,e){return t.dialog.close("warning")}).addButton("btn-success","BTN-SUCCESS",function(t,e){return t.dialog.close("success")})}function s(t){var e=[];return e.push(o.call(this,t)),e.push(n.call(this,t)),e.push(r.call(this,t)),e.push(t.alert().className(this.theme).message("Cascading modals! Find your way out...")),{open:function(){for(var t=e.shift().open();e.length>0;)e.shift().open();return t}}}e.alert=o,e.prompt=n,e.confirm=r,e.noButtons=i,e.customButtons=a,e.cascading=s},577:function(t,e,o){"use strict";var n=this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,a=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(i<3?r(a):i>3?r(e,o,a):r(e,o))||a);return i>3&&a&&Object.defineProperty(e,o,a),a},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},i=o(1),a=o(20),s=o(356),c=o(393),l=o(166),d=o(578),u=o(408),f=o(407),p=function(){function t(){}return t=n([i.NgModule({imports:[s.FormsModule,a.CommonModule,c.VexModalModule,d.routing,l.SharedModule],declarations:[u.VexDemo,f.LoginDialog],entryComponents:[f.LoginDialog]}),r("design:paramtypes",[])],t)}();e.VexDemoModule=p},578:function(t,e,o){"use strict";var n=o(115),r=o(408);e.routing=n.RouterModule.forChild([{path:"vex-demo",component:r.VexDemo}])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,