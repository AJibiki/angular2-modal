{"version":3,"file":"presets.js","sourceRoot":"","sources":["presets.ts"],"names":[],"mappings":";AAEA,eAAsB,KAAY;IAC9B,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE;SACf,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;SACrB,OAAO,CAAC,mBAAmB,CAAC;SAC5B,eAAe,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AALe,aAAK,QAKpB,CAAA;AAED,gBAAuB,KAAY;IAC/B,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;SAChB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;SACrB,OAAO,CAAC,sBAAsB,CAAC;SAC/B,WAAW,CAAC,uBAAuB,CAAC,CAAC;AAC9C,CAAC;AALe,cAAM,SAKrB,CAAA;AAED,iBAAwB,KAAY;IAChC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;SACjB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;SACrB,OAAO,CAAC,YAAY,CAAC,CAAC;AAC/B,CAAC;AAJe,eAAO,UAItB,CAAA;AAED,mBAA0B,KAAY;IAClC,IAAI,OAAO,GAAG,EAAE,CAAC;IAEjB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IACtC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IACvC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IACxC,OAAO,CAAC,IAAI,CACR,KAAK,CAAC,KAAK,EAAE;SACR,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;SACrB,OAAO,CAAC,wCAAwC,CAAC,CACzD,CAAC;IAEF,MAAM,CAAM;QACR,IAAI,EAAE;YACF,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;YACjC,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC;gBAAE,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;YAClD,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;KACJ,CAAC;AACN,CAAC;AAnBe,iBAAS,YAmBxB,CAAA","sourcesContent":["import { Modal, DropInPresetBuilder } from '../../../components/angular2-modal/plugins/vex';\n\nexport function alert(modal: Modal): DropInPresetBuilder {\n    return modal.alert()\n        .className(this.theme)\n        .message('An alert message!')\n        .showCloseButton(true);\n}\n\nexport function prompt(modal: Modal): DropInPresetBuilder {\n    return modal.prompt()\n        .className(this.theme)\n        .message('Please type a value!')\n        .placeholder('This is a placeholder');\n}\n\nexport function confirm(modal: Modal): DropInPresetBuilder {\n    return modal.confirm()\n        .className(this.theme)\n        .message('Yes or No?');\n}\n\nexport function cascading(modal: Modal): DropInPresetBuilder {\n    let presets = [];\n\n    presets.push(alert.call(this, modal));\n    presets.push(prompt.call(this, modal));\n    presets.push(confirm.call(this, modal));\n    presets.push(\n        modal.alert()\n            .className(this.theme)\n            .message('Cascading modals! Find your way out...')\n    );\n\n    return <any>{\n        open: () => {\n            let ret = presets.shift().open();\n            while (presets.length > 0) presets.shift().open();\n            return ret;\n        }\n    };\n}\n"]}